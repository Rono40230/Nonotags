#!/usr/bin/env python3
"""
Script de d√©monstration pour le Module 6 - Tag Synchronizer
Finalisation et synchronisation des m√©tadonn√©es MP3
"""

import sys
import os
import time
from pathlib import Path

# Ajout du chemin du projet
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.tag_synchronizer import TagSynchronizer, SynchronizationAction, CoverAssociationResult
from support.logger import AppLogger
from support.config_manager import ConfigManager

def create_demo_environment():
    """Cr√©e un environnement de d√©monstration avec fichiers MP3 et pochettes."""
    demo_dir = Path("demo_tag_sync")
    demo_dir.mkdir(exist_ok=True)
    
    # Cr√©ation d'un album de d√©monstration
    album_dir = demo_dir / "Album_Demo"
    album_dir.mkdir(exist_ok=True)
    
    print(f"üìÅ Cr√©ation de l'environnement de d√©monstration dans : {album_dir}")
    
    # Cr√©ation de fichiers MP3 de test (headers MP3 valides minimaux)
    mp3_files = [
        "01 - Premi√®re Chanson.mp3",
        "02 - Deuxi√®me Titre.mp3", 
        "03 - Troisi√®me Morceau.mp3"
    ]
    
    for mp3_file in mp3_files:
        mp3_path = album_dir / mp3_file
        with open(mp3_path, 'wb') as f:
            # Header MP3 minimal valide
            f.write(b'\xff\xfb\x90\x00')  # Sync word + layer info
            f.write(b'0' * 2000)  # Donn√©es audio factices
        print(f"   ‚úÖ Fichier MP3 cr√©√© : {mp3_file}")
    
    # Cr√©ation d'une pochette de test
    try:
        from PIL import Image, ImageDraw, ImageFont
        
        # Cr√©ation d'une image de pochette 500x500
        img = Image.new('RGB', (500, 500), color='#2E4057')
        draw = ImageDraw.Draw(img)
        
        # Ajout de texte sur la pochette
        try:
            # Essayer d'utiliser une police syst√®me
            font = ImageFont.truetype("DejaVuSans.ttf", 40)
        except:
            # Fallback vers la police par d√©faut
            font = ImageFont.load_default()
        
        # Dessiner le titre de l'album
        draw.text((50, 200), "ALBUM DEMO", fill='white', font=font)
        draw.text((50, 250), "Nonotags Test", fill='#FFD700', font=font)
        
        # Dessiner un cadre d√©coratif
        for i in range(5):
            draw.rectangle([i, i, 499-i, 499-i], outline='#FFD700')
        
        # Sauvegarder la pochette
        cover_path = album_dir / "cover.jpg"
        img.save(cover_path, 'JPEG', quality=95)
        print(f"   üé® Pochette cr√©√©e : cover.jpg (500x500)")
        
    except ImportError:
        # Fallback sans PIL
        cover_path = album_dir / "cover.jpg"
        # Cr√©er un fichier JPEG minimal valide
        jpeg_header = bytes.fromhex('FFD8FFE000104A464946000101010060006000FFDB004300080606070605080707070909080A0C140D0C0B0B0C1912130F141D1A1F1E1D1A1C1C20242E2720222C231C1C2837292C30313434341F27393D38323C2E333432FFDB0043010909090C0B0C180D0D1832211C213232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232FFC00011080064006403012200021101031101FFC4001F0000010501010101010100000000000000000102030405060708090A0BFFC400B5100002010303020403050504040000017D01020300041105122131410613516107227114328191A1082342B1C11552D1F02433627282090A161718191A25262728292A3435363738393A434445464748494A535455565758595A636465666768696A737475767778797A838485868788898A92939495969798999AA2A3A4A5A6A7A8A9AAB2B3B4B5B6B7B8B9BAC2C3C4C5C6C7C8C9CAD2D3D4D5D6D7D8D9DAE1E2E3E4E5E6E7E8E9EAF1F2F3F4F5F6F7F8F9FAFFC4001F0100030101010101010101010000000000000102030405060708090A0BFFC400B51100020102040403040705040400010277000102031104052131061241510761711322328108144291A1B1C109233352F0156272D10A162434E125F11718191A262728292A35363738393A434445464748494A535455565758595A636465666768696A737475767778797A82838485868788898A92939495969798999AA2A3A4A5A6A7A8A9AAB2B3B4B5B6B7B8B9BAC2C3C4C5C6C7C8C9CAD2D3D4D5D6D7D8D9DAE2E3E4E5E6E7E8E9EAF2F3F4F5F6F7F8F9FAFFDA000C03010002110311003F00')
        
        with open(cover_path, 'wb') as f:
            f.write(jpeg_header)
            f.write(b'\xFF' * 1000)  # Donn√©es d'image factices
            f.write(b'\xFF\xD9')  # Marqueur de fin JPEG
        
        print(f"   üé® Pochette basique cr√©√©e : cover.jpg")
    
    return album_dir

def demonstrate_file_synchronization():
    """D√©montre la synchronisation d'un fichier individuel."""
    print("\n" + "="*60)
    print("üîÑ D√âMONSTRATION - SYNCHRONISATION DE FICHIER INDIVIDUEL")
    print("="*60)
    
    try:
        # Cr√©ation de l'environnement
        album_dir = create_demo_environment()
        
        # Initialisation du synchronizer
        print("\nüìö Initialisation du TagSynchronizer...")
        synchronizer = TagSynchronizer()
        
        # S√©lection d'un fichier MP3
        mp3_files = list(album_dir.glob("*.mp3"))
        if not mp3_files:
            print("‚ùå Aucun fichier MP3 trouv√©")
            return
        
        test_file = mp3_files[0]
        print(f"üéµ Fichier s√©lectionn√© : {test_file.name}")
        
        # M√©tadonn√©es de test
        metadata = {
            'TIT2': 'Chanson de D√©monstration',
            'TPE1': 'Artiste Test',
            'TALB': 'Album Demo Nonotags',
            'TYER': '2024',
            'TCON': 'D√©monstration',
            'TRCK': '1/3'
        }
        
        print(f"\nüìù M√©tadonn√©es √† appliquer :")
        for key, value in metadata.items():
            print(f"   ‚Ä¢ {key}: {value}")
        
        # Synchronisation
        print(f"\nüîÑ Synchronisation en cours...")
        start_time = time.time()
        
        result = synchronizer.synchronize_file(str(test_file), metadata)
        
        processing_time = time.time() - start_time
        
        # Affichage des r√©sultats
        print(f"\nüìä R√âSULTATS DE LA SYNCHRONISATION :")
        print(f"   ‚Ä¢ Fichier : {result.file_path}")
        print(f"   ‚Ä¢ Pochette associ√©e : {'‚úÖ' if result.cover_associated else '‚ùå'}")
        print(f"   ‚Ä¢ Tags mis √† jour : {'‚úÖ' if result.tags_updated else '‚ùå'}")
        print(f"   ‚Ä¢ Temps de traitement : {result.processing_time:.3f}s")
        
        if result.cover_result:
            print(f"   ‚Ä¢ R√©sultat pochette : {result.cover_result.value}")
        
        if result.actions_performed:
            print(f"   ‚Ä¢ Actions effectu√©es :")
            for action in result.actions_performed:
                print(f"     - {action.value}")
        
        if result.warnings:
            print(f"   ‚Ä¢ ‚ö†Ô∏è  Avertissements :")
            for warning in result.warnings:
                print(f"     - {warning}")
        
        if result.error:
            print(f"   ‚Ä¢ ‚ùå Erreur : {result.error}")
        
        print(f"\n‚úÖ Synchronisation termin√©e avec succ√®s !")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la d√©monstration : {e}")

def demonstrate_album_synchronization():
    """D√©montre la synchronisation compl√®te d'un album."""
    print("\n" + "="*60)
    print("üéº D√âMONSTRATION - SYNCHRONISATION COMPL√àTE D'ALBUM")
    print("="*60)
    
    try:
        # Cr√©ation de l'environnement
        album_dir = create_demo_environment()
        
        # Initialisation du synchronizer
        print("\nüìö Initialisation du TagSynchronizer...")
        synchronizer = TagSynchronizer()
        
        print(f"üìÅ Album √† synchroniser : {album_dir}")
        
        # Compter les fichiers MP3
        mp3_files = list(album_dir.glob("*.mp3"))
        print(f"üéµ Fichiers MP3 trouv√©s : {len(mp3_files)}")
        
        # V√©rifier la pr√©sence de pochette
        covers = list(album_dir.glob("cover.*"))
        print(f"üé® Pochettes trouv√©es : {len(covers)}")
        
        # Synchronisation compl√®te
        print(f"\nüîÑ Synchronisation compl√®te en cours...")
        start_time = time.time()
        
        result = synchronizer.synchronize_album(str(album_dir), apply_metadata=True)
        
        processing_time = time.time() - start_time
        
        # Affichage des r√©sultats globaux
        print(f"\nüìä R√âSULTATS DE LA SYNCHRONISATION D'ALBUM :")
        print(f"   ‚Ä¢ Album : {result.album_path}")
        print(f"   ‚Ä¢ Fichiers trait√©s : {result.files_processed}/{result.total_files}")
        print(f"   ‚Ä¢ Pochettes associ√©es : {result.covers_associated}")
        print(f"   ‚Ä¢ Tags mis √† jour : {result.tags_updated}")
        print(f"   ‚Ä¢ Temps total : {result.processing_time:.3f}s")
        
        # D√©tails par fichier
        if result.file_results:
            print(f"\nüìã D√âTAILS PAR FICHIER :")
            for i, file_result in enumerate(result.file_results, 1):
                filename = Path(file_result.file_path).name
                cover_status = "‚úÖ" if file_result.cover_associated else "‚ùå"
                tags_status = "‚úÖ" if file_result.tags_updated else "‚ùå"
                
                print(f"   {i}. {filename}")
                print(f"      ‚Ä¢ Pochette : {cover_status}")
                print(f"      ‚Ä¢ Tags : {tags_status}")
                print(f"      ‚Ä¢ Temps : {file_result.processing_time:.3f}s")
                
                if file_result.warnings:
                    for warning in file_result.warnings:
                        print(f"      ‚Ä¢ ‚ö†Ô∏è  {warning}")
        
        # Avertissements globaux
        if result.warnings:
            print(f"\n‚ö†Ô∏è  AVERTISSEMENTS GLOBAUX :")
            for warning in result.warnings:
                print(f"   ‚Ä¢ {warning}")
        
        # Erreurs
        if result.errors:
            print(f"\n‚ùå ERREURS :")
            for error in result.errors:
                print(f"   ‚Ä¢ {error}")
        
        print(f"\n‚úÖ Synchronisation d'album termin√©e !")
        
        # Statistiques finales
        success_rate = (result.files_processed / max(result.total_files, 1)) * 100
        print(f"\nüìà STATISTIQUES :")
        print(f"   ‚Ä¢ Taux de r√©ussite : {success_rate:.1f}%")
        print(f"   ‚Ä¢ Pochettes par fichier : {result.covers_associated}/{result.files_processed}")
        print(f"   ‚Ä¢ Performance : {result.files_processed/max(result.processing_time, 0.001):.1f} fichiers/seconde")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la d√©monstration : {e}")

def demonstrate_cover_management():
    """D√©montre la gestion des pochettes."""
    print("\n" + "="*60)
    print("üé® D√âMONSTRATION - GESTION DES POCHETTES")
    print("="*60)
    
    try:
        # Cr√©ation de l'environnement
        album_dir = create_demo_environment()
        
        # Initialisation du synchronizer
        print("\nüìö Initialisation du TagSynchronizer...")
        synchronizer = TagSynchronizer()
        
        # Test de recherche de pochette
        print(f"\nüîç Recherche de pochette dans : {album_dir}")
        cover_path = synchronizer.find_cover_image(str(album_dir))
        
        if cover_path:
            print(f"‚úÖ Pochette trouv√©e : {Path(cover_path).name}")
            
            # Validation de la pochette
            print(f"\nüîç Validation de la pochette...")
            is_valid, warnings = synchronizer.validate_cover_image(cover_path)
            
            print(f"üìä VALIDATION DE LA POCHETTE :")
            print(f"   ‚Ä¢ Validit√© : {'‚úÖ Valide' if is_valid else '‚ùå Invalide'}")
            
            if warnings:
                print(f"   ‚Ä¢ ‚ö†Ô∏è  Avertissements :")
                for warning in warnings:
                    print(f"     - {warning}")
            else:
                print(f"   ‚Ä¢ ‚úÖ Aucun avertissement")
            
            # Test d'association √† un MP3
            mp3_files = list(album_dir.glob("*.mp3"))
            if mp3_files:
                test_file = mp3_files[0]
                print(f"\nüîó Test d'association avec : {test_file.name}")
                
                result = synchronizer.associate_cover_to_mp3(str(test_file), cover_path)
                
                print(f"üìä R√âSULTAT DE L'ASSOCIATION :")
                print(f"   ‚Ä¢ Statut : {result.value}")
                
                status_messages = {
                    CoverAssociationResult.SUCCESS: "‚úÖ Association r√©ussie",
                    CoverAssociationResult.ALREADY_EXISTS: "‚ÑπÔ∏è  Pochette d√©j√† pr√©sente",
                    CoverAssociationResult.COVER_NOT_FOUND: "‚ùå Pochette introuvable",
                    CoverAssociationResult.INVALID_FORMAT: "‚ùå Format invalide",
                    CoverAssociationResult.SIZE_TOO_SMALL: "‚ùå Taille trop petite",
                    CoverAssociationResult.ERROR: "‚ùå Erreur d'association"
                }
                
                print(f"   ‚Ä¢ Message : {status_messages.get(result, 'Statut inconnu')}")
        else:
            print(f"‚ùå Aucune pochette trouv√©e")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la d√©monstration : {e}")

def demonstrate_backup_restore():
    """D√©montre la sauvegarde et restauration."""
    print("\n" + "="*60)
    print("üíæ D√âMONSTRATION - SAUVEGARDE ET RESTAURATION")
    print("="*60)
    
    try:
        # Cr√©ation de l'environnement
        album_dir = create_demo_environment()
        
        # Initialisation du synchronizer
        print("\nüìö Initialisation du TagSynchronizer...")
        synchronizer = TagSynchronizer()
        
        # S√©lection d'un fichier MP3
        mp3_files = list(album_dir.glob("*.mp3"))
        if not mp3_files:
            print("‚ùå Aucun fichier MP3 trouv√©")
            return
        
        test_file = mp3_files[0]
        print(f"üéµ Fichier de test : {test_file.name}")
        
        # Cr√©ation d'une sauvegarde
        print(f"\nüíæ Cr√©ation de la sauvegarde...")
        backup_path = synchronizer.create_backup(str(test_file))
        
        if backup_path:
            print(f"‚úÖ Sauvegarde cr√©√©e : {Path(backup_path).name}")
            
            # Modification simul√©e du fichier original
            print(f"\n‚úèÔ∏è  Simulation de modification du fichier...")
            with open(test_file, 'ab') as f:
                f.write(b'\x00' * 100)  # Ajout de donn√©es
            
            print(f"‚úÖ Fichier modifi√© (taille augment√©e)")
            
            # V√©rification des tailles
            original_size = Path(test_file).stat().st_size
            backup_size = Path(backup_path).stat().st_size
            
            print(f"\nüìä COMPARAISON DES TAILLES :")
            print(f"   ‚Ä¢ Fichier original : {original_size} bytes")
            print(f"   ‚Ä¢ Sauvegarde : {backup_size} bytes")
            print(f"   ‚Ä¢ Diff√©rence : {original_size - backup_size} bytes")
            
            # Restauration depuis la sauvegarde
            print(f"\nüîÑ Restauration depuis la sauvegarde...")
            restore_success = synchronizer.restore_from_backup(backup_path, str(test_file))
            
            if restore_success:
                print(f"‚úÖ Restauration r√©ussie")
                
                # V√©rification de la restauration
                restored_size = Path(test_file).stat().st_size
                print(f"üìä V√âRIFICATION DE LA RESTAURATION :")
                print(f"   ‚Ä¢ Taille apr√®s restauration : {restored_size} bytes")
                print(f"   ‚Ä¢ Restauration correcte : {'‚úÖ' if restored_size == backup_size else '‚ùå'}")
            else:
                print(f"‚ùå √âchec de la restauration")
            
            # Nettoyage de la sauvegarde
            try:
                Path(backup_path).unlink()
                print(f"üóëÔ∏è  Sauvegarde nettoy√©e")
            except:
                pass
        else:
            print(f"‚ùå √âchec de la cr√©ation de sauvegarde")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la d√©monstration : {e}")

def main():
    """Fonction principale de d√©monstration."""
    print("üéµ" + "="*58 + "üéµ")
    print("           MODULE 6 - TAG SYNCHRONIZER DEMO")
    print("                Finalisation MP3 Nonotags")
    print("üéµ" + "="*58 + "üéµ")
    
    try:
        # Affichage du menu
        print("\nüìã D√©monstrations disponibles :")
        print("   1. üîÑ Synchronisation de fichier individuel")
        print("   2. üéº Synchronisation compl√®te d'album")
        print("   3. üé® Gestion des pochettes")
        print("   4. üíæ Sauvegarde et restauration")
        print("   5. üéØ Toutes les d√©monstrations")
        
        # Choix interactif ou automatique
        if len(sys.argv) > 1:
            choice = sys.argv[1]
        else:
            try:
                choice = input("\nüëâ Choisissez une d√©monstration (1-5) : ").strip()
            except (EOFError, KeyboardInterrupt):
                choice = "5"  # Par d√©faut, toutes les d√©mos
        
        # Ex√©cution des d√©monstrations
        if choice == "1":
            demonstrate_file_synchronization()
        elif choice == "2":
            demonstrate_album_synchronization()
        elif choice == "3":
            demonstrate_cover_management()
        elif choice == "4":
            demonstrate_backup_restore()
        elif choice == "5":
            print("\nüéØ Ex√©cution de toutes les d√©monstrations...")
            demonstrate_file_synchronization()
            demonstrate_album_synchronization()
            demonstrate_cover_management()
            demonstrate_backup_restore()
        else:
            print(f"‚ùå Choix invalide : {choice}")
            return
        
        print(f"\nüéâ D√âMONSTRATION TERMIN√âE !")
        print(f"üí° Le Module 6 - TagSynchronizer est maintenant op√©rationnel")
        print(f"üîó Il peut √™tre int√©gr√© avec les autres modules Nonotags")
        
    except KeyboardInterrupt:
        print(f"\n\n‚èπÔ∏è  D√©monstration interrompue par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la d√©monstration : {e}")
        raise

if __name__ == "__main__":
    main()
