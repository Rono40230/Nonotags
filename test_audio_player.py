#!/usr/bin/env python3
"""
Test du module AudioPlayer
"""

import sys
import os

# Ajouter le r√©pertoire parent au path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_audio_player():
    """Test basique du module AudioPlayer"""
    print("üéµ Test du module AudioPlayer...")
    
    try:
        from services.audio_player import AudioPlayer, PlayerState
        print("‚úÖ Import AudioPlayer r√©ussi")
        
        # Test d'instanciation
        try:
            player = AudioPlayer()
            print("‚úÖ Instanciation AudioPlayer r√©ussie")
            
            # Test des m√©thodes basiques
            state = player.get_state()
            print(f"‚úÖ √âtat initial: {state}")
            
            formats = player.get_supported_formats()
            print(f"‚úÖ Formats support√©s: {formats}")
            
            # Test de nettoyage
            player.cleanup()
            print("‚úÖ Nettoyage r√©ussi")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur instanciation: {e}")
            return False
            
    except ImportError as e:
        print(f"‚ùå Erreur import AudioPlayer: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        return False

def test_cover_search():
    """Test basique du module CoverSearch"""
    print("\nüîç Test du module CoverSearchService...")
    
    try:
        from services.cover_search import CoverSearchService, CoverResult
        print("‚úÖ Import CoverSearchService r√©ussi")
        
        # Test d'instanciation
        try:
            service = CoverSearchService()
            print("‚úÖ Instanciation CoverSearchService r√©ussie")
            
            # Test des m√©thodes de validation
            test_result = service.validate_cover_file("/tmp/inexistant.jpg")
            print(f"‚úÖ Test validation: {test_result}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur instanciation: {e}")
            return False
            
    except ImportError as e:
        print(f"‚ùå Erreur import CoverSearchService: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        return False

def test_exceptions_window():
    """Test basique du module ExceptionsWindow"""
    print("\n‚öôÔ∏è Test du module ExceptionsWindow...")
    
    try:
        from ui.views.exceptions_window import ExceptionsWindow
        print("‚úÖ Import ExceptionsWindow r√©ussi")
        
        # Note: Ne pas instancier GTK sans environnement graphique
        print("‚úÖ Module ExceptionsWindow disponible (test GUI requis)")
        
        return True
            
    except ImportError as e:
        print(f"‚ùå Erreur import ExceptionsWindow: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        return False

def main():
    """Lance tous les tests"""
    print("üß™ TESTS DES MODULES CR√â√âS")
    print("=" * 40)
    
    results = []
    
    # Test AudioPlayer
    results.append(test_audio_player())
    
    # Test CoverSearch
    results.append(test_cover_search())
    
    # Test ExceptionsWindow
    results.append(test_exceptions_window())
    
    # Bilan
    print("\n" + "=" * 40)
    print("üìä BILAN DES TESTS")
    
    success_count = sum(results)
    total_count = len(results)
    
    print(f"‚úÖ Modules r√©ussis: {success_count}/{total_count}")
    
    if success_count == total_count:
        print("üéâ TOUS LES MODULES FONCTIONNENT !")
        return True
    else:
        print("‚ö†Ô∏è Certains modules n√©cessitent des corrections")
        return False

if __name__ == "__main__":
    main()
