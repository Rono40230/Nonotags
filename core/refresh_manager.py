"""
Module de rafra√Æchissement centralis√© pour Nonotags
Assure l'effet miroir entre m√©tadonn√©es et interface utilisateur
"""

import threading
from gi.repository import GLib
from typing import List, Set, Callable, Optional
import weakref
import os


class RefreshManager:
    """
    Gestionnaire centralis√© de rafra√Æchissement d'interface
    Pattern Singleton pour coordination globale
    """
    
    _instance = None
    _lock = threading.Lock()
    
    def __new__(cls):
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super().__new__(cls)
                    cls._instance._initialized = False
        return cls._instance
    
    def __init__(self):
        if self._initialized:
            return
            
        self._initialized = True
        
        # Registry des composants d'affichage (WeakReferences pour √©viter les fuites m√©moire)
        self._display_components = weakref.WeakSet()
        
        # Cache des albums modifi√©s (pour √©viter les rafra√Æchissements redondants)
        self._pending_refreshes: Set[str] = set()
        
        # Timer pour regrouper les notifications
        self._refresh_timer = None
        self._refresh_delay_ms = 100  # 100ms de d√©lai pour regrouper les notifications
        
        print("üîÑ RefreshManager initialis√©")
    
    @classmethod
    def get_instance(cls):
        """R√©cup√®re l'instance singleton"""
        return cls()
    
    def register_display_component(self, component):
        """
        Enregistre un composant d'affichage pour les notifications
        
        Args:
            component: Objet avec une m√©thode de rafra√Æchissement (_refresh_albums_display, _update_display, etc.)
        """
        if component is None:
            return
            
        self._display_components.add(component)
        component_type = type(component).__name__
        print(f"üìù Composant d'affichage enregistr√©: {component_type}")
    
    def unregister_display_component(self, component):
        """
        D√©senregistre un composant d'affichage
        
        Args:
            component: Composant √† supprimer du registry
        """
        if component in self._display_components:
            self._display_components.discard(component)
            component_type = type(component).__name__
            print(f"üìù Composant d'affichage d√©senregistr√©: {component_type}")
    
    def notify_metadata_changed(self, album_paths: List[str] = None, immediate: bool = False):
        """
        Notifie que des m√©tadonn√©es ont chang√©
        
        Args:
            album_paths: Liste des chemins d'albums modifi√©s (None = tout rafra√Æchir)
            immediate: Si True, rafra√Æchit imm√©diatement sans d√©lai
        """
        if album_paths:
            # Normaliser les chemins d'albums
            normalized_paths = []
            for path in album_paths:
                if os.path.isfile(path):
                    # Si c'est un fichier, prendre le dossier parent
                    album_path = os.path.dirname(path)
                else:
                    album_path = path
                normalized_paths.append(album_path)
            
            self._pending_refreshes.update(normalized_paths)
            print(f"üîÑ M√©tadonn√©es modifi√©es: {len(normalized_paths)} albums en attente")
        else:
            # Rafra√Æchissement global
            self._pending_refreshes.clear()
            print(f"üîÑ Rafra√Æchissement global demand√©")
        
        if immediate:
            self._execute_refresh()
        else:
            self._schedule_refresh()
    
    def _schedule_refresh(self):
        """Programme un rafra√Æchissement avec d√©lai pour regrouper les notifications"""
        if self._refresh_timer:
            GLib.source_remove(self._refresh_timer)
        
        self._refresh_timer = GLib.timeout_add(self._refresh_delay_ms, self._execute_refresh)
    
    def _execute_refresh(self):
        """Ex√©cute le rafra√Æchissement des composants enregistr√©s"""
        try:
            if not self._display_components:
                print("‚ö†Ô∏è Aucun composant d'affichage enregistr√©")
                return False
            
            pending_count = len(self._pending_refreshes)
            albums_to_refresh = list(self._pending_refreshes) if self._pending_refreshes else None
            
            print(f"üîÑ Rafra√Æchissement en cours: {pending_count} albums sp√©cifiques" if albums_to_refresh else "üîÑ Rafra√Æchissement global")
            
            # Parcourir tous les composants enregistr√©s
            refreshed_count = 0
            for component in list(self._display_components):  # Copie pour √©viter les modifications concurrentes
                if self._refresh_component(component, albums_to_refresh):
                    refreshed_count += 1
            
            print(f"‚úÖ Rafra√Æchissement termin√©: {refreshed_count} composants mis √† jour")
            
            # Nettoyer les rafra√Æchissements en attente
            self._pending_refreshes.clear()
            self._refresh_timer = None
            
        except Exception as e:
            print(f"‚ùå Erreur lors du rafra√Æchissement: {e}")
            self._refresh_timer = None
        
        return False  # Ne pas r√©p√©ter le timer
    
    def _refresh_component(self, component, albums_to_refresh: Optional[List[str]] = None):
        """
        Rafra√Æchit un composant sp√©cifique en mettant √† jour directement ses cartes
        
        Args:
            component: Composant √† rafra√Æchir (doit √™tre NonotagsApp)
            albums_to_refresh: Liste des albums √† rafra√Æchir (None = tous)
            
        Returns:
            bool: True si le rafra√Æchissement a r√©ussi
        """
        try:
            component_type = type(component).__name__
            
            # Traitement sp√©cial pour NonotagsApp
            if component_type == "NonotagsApp":
                return self._refresh_nonotags_app_cards(component, albums_to_refresh)
            
            # Fallback vers les m√©thodes existantes pour autres composants
            refresh_method = None
            method_name = "inconnu"
            
            if hasattr(component, '_refresh_albums_display'):
                refresh_method = component._refresh_albums_display
                method_name = "_refresh_albums_display"
            elif hasattr(component, '_update_display'):
                refresh_method = component._update_display
                method_name = "_update_display"
            elif hasattr(component, 'refresh'):
                refresh_method = component.refresh
                method_name = "refresh"
            elif hasattr(component, 'update'):
                refresh_method = component.update
                method_name = "update"
            
            if refresh_method:
                # Programmer le rafra√Æchissement dans le thread principal GTK
                GLib.idle_add(refresh_method)
                print(f"  üì± {component_type}.{method_name}() programm√©")
                return True
            else:
                print(f"  ‚ö†Ô∏è {component_type}: aucune m√©thode de rafra√Æchissement trouv√©e")
                return False
                
        except Exception as e:
            print(f"  ‚ùå Erreur rafra√Æchissement {type(component).__name__}: {e}")
            return False
    
    def _refresh_nonotags_app_cards(self, app, albums_to_refresh: Optional[List[str]] = None):
        """
        Met √† jour directement les cartes dans NonotagsApp sans rescan complet
        
        Args:
            app: Instance de NonotagsApp
            albums_to_refresh: Liste des dossiers d'albums √† rafra√Æchir
            
        Returns:
            bool: True si le rafra√Æchissement a r√©ussi
        """
        try:
            if not hasattr(app, 'albums_grid'):
                print("  ‚ö†Ô∏è NonotagsApp: albums_grid non trouv√©")
                return False
            
            # Fonction √† ex√©cuter dans le thread principal GTK
            def update_cards():
                try:
                    updated_count = 0
                    
                    # Parcourir toutes les cartes dans albums_grid
                    children = app.albums_grid.get_children()
                    print(f"  üîç Parcours de {len(children)} √©l√©ments dans albums_grid")
                    
                    for i, child in enumerate(children):
                        child_type = type(child).__name__
                        has_update = hasattr(child, '_update_display')
                        print(f"    üéØ Enfant {i}: {child_type}, _update_display: {has_update}")
                        
                        # Si c'est un FlowBoxChild, r√©cup√©rer la vraie carte √† l'int√©rieur
                        actual_card = child
                        if child_type == "FlowBoxChild":
                            # FlowBoxChild contient la vraie carte d'album
                            actual_card = child.get_child()
                            if actual_card:
                                actual_card_type = type(actual_card).__name__
                                has_update = hasattr(actual_card, '_update_display')
                                print(f"      üéØ Carte r√©elle: {actual_card_type}, _update_display: {has_update}")
                        
                        if hasattr(actual_card, '_update_display'):
                            # Si albums_to_refresh est sp√©cifi√©, v√©rifier si cette carte correspond
                            if albums_to_refresh:
                                card_path = getattr(actual_card, 'album_path', None)
                                if card_path and card_path not in albums_to_refresh:
                                    continue
                            
                            # Mettre √† jour la carte
                            actual_card._update_display()
                            updated_count += 1
                            print(f"      ‚úÖ Carte mise √† jour!")
                    
                    print(f"  üì± {updated_count} cartes mises √† jour directement")
                    return False  # Ne pas r√©p√©ter le timer
                    
                except Exception as e:
                    print(f"  ‚ùå Erreur mise √† jour cartes: {e}")
                    return False
            
            # Programmer la mise √† jour dans le thread principal
            GLib.idle_add(update_cards)
            return True
            
        except Exception as e:
            print(f"  ‚ùå Erreur _refresh_nonotags_app_cards: {e}")
            return False
    
    def force_refresh_all(self):
        """Force un rafra√Æchissement imm√©diat de tous les composants"""
        print("üîÑ Rafra√Æchissement forc√© de tous les composants")
        self._pending_refreshes.clear()
        self._execute_refresh()
    
    def get_status(self):
        """Retourne le statut du gestionnaire pour debug"""
        return {
            "components_count": len(self._display_components),
            "pending_refreshes": len(self._pending_refreshes),
            "pending_albums": list(self._pending_refreshes),
            "timer_active": self._refresh_timer is not None
        }


# Instance globale pour faciliter l'acc√®s
refresh_manager = RefreshManager.get_instance()